[{"id":0,"href":"/docs/traefik/","title":"Traefik Reverse Proxy","section":"Docs","content":" Traefik Reverse Proxy # Overview # This document details the Traefik reverse proxy configuration for homelab services with separate internal and external access paths. Traefik serves as the central gateway for all web services in the homelab, providing:\nAutomatic HTTPS with Cloudflare DNS validation Separate entrypoints for internal and external access Protected dashboard interface Docker service auto-discovery Integration with authentication services Architecture # The external entrypoint relies on firewall port forwarding from 443 to 444, keeping internal and external traffic separate. Components # Traefik Proxy: Main reverse proxy service Docker Integration: Service auto-discovery Cloudflare DNS: Certificate issuance and validation Network Design # Internal Access: Standard ports 80/443 for local network External Access: Ports 81/444 for internet access Security Separation: Distinct handling of internal vs external requests Setup # Prerequisites # Docker and Docker Compose installed External Docker network named \u0026ldquo;proxy\u0026rdquo; created Cloudflare DNS configured for your domain Cloudflare API token with Zone:DNS:Edit permissions Basic understanding of Docker networks and labels Installation Steps # 1. Directory Structure # mkdir -p /your/path/traefik/data touch /your/path/traefik/data/acme.json chmod 600 /your/path/traefik/data/acme.json 2. Cloudflare API Token # echo \u0026#34;your-cloudflare-api-token\u0026#34; \u0026gt; /your/path/traefik/cf_api_token.txt 3. Environment File # # Generate with: echo $(htpasswd -nb user password) TRAEFIK_DASHBOARD_CREDENTIALS=user:hashed_password 4. Static Configuration # Save this as /your/path/traefik/data/traefik.yml:\napi: dashboard: true debug: true entryPoints: http: address: \u0026#34;:80\u0026#34; http: redirections: entryPoint: to: https scheme: https https: address: \u0026#34;:443\u0026#34; external-http: address: \u0026#34;:81\u0026#34; external-https: address: \u0026#34;:444\u0026#34; serversTransport: insecureSkipVerify: true providers: docker: endpoint: \u0026#34;unix:///var/run/docker.sock\u0026#34; exposedByDefault: false file: filename: /config.yml certificatesResolvers: cloudflare: acme: email: example@mail.com storage: acme.json dnsChallenge: provider: cloudflare #disablePropagationCheck: true # uncomment this if you have issues pulling certificates through cloudflare #delayBeforeCheck: 60s # uncomment along with disablePropagationCheck if needed resolvers: - \u0026#34;1.1.1.1:53\u0026#34; - \u0026#34;1.0.0.1:53\u0026#34; log: level: DEBUG # Options: ERROR, WARN, INFO, DEBUG 5. Dynamic Configuration # Create the file /your/path/traefik/data/config.yml with your Authentik middleware and security settings:\nhttp: middlewares: middlewares-authentik: forwardAuth: address: \u0026#34;http://server:9000/outpost.goauthentik.io/auth/traefik\u0026#34; trustForwardHeader: true authResponseHeaders: - X-authentik-username - X-authentik-groups - X-authentik-email - X-authentik-name - X-authentik-uid - X-authentik-jwt - X-authentik-meta-jwks - X-authentik-meta-outpost - X-authentik-meta-provider - X-authentik-meta-app - X-authentik-meta-version - Authorization https-redirectscheme: redirectScheme: scheme: https permanent: true default-headers: headers: frameDeny: true browserXssFilter: true contentTypeNosniff: true forceSTSHeader: true stsIncludeSubdomains: true stsPreload: true stsSeconds: 15552000 customFrameOptionsValue: SAMEORIGIN customRequestHeaders: X-Forwarded-Proto: https default-whitelist: ipAllowList: sourceRange: - \u0026#34;10.0.0.0/8\u0026#34; - \u0026#34;192.168.0.0/16\u0026#34; - \u0026#34;172.16.0.0/12\u0026#34; secured: chain: middlewares: - default-whitelist - default-headers 6. Docker Compose # Save the following as docker-compose.yml:\nversion: \u0026#34;3.8\u0026#34; services: traefik: image: traefik:latest container_name: traefik restart: unless-stopped security_opt: - no-new-privileges:true networks: - proxy ports: - 80:80 - 443:443 - 81:81 - 444:444 # - 443:443/tcp # Uncomment if you want HTTP3 # - 443:443/udp # Uncomment if you want HTTP3 environment: CF_DNS_API_TOKEN_FILE: /run/secrets/cf_api_token # note using _FILE for docker secrets # CF_DNS_API_TOKEN: ${CF_DNS_API_TOKEN} # if using .env TRAEFIK_DASHBOARD_CREDENTIALS: ${TRAEFIK_DASHBOARD_CREDENTIALS} secrets: - cf_api_token env_file: .env # use .env volumes: - /etc/localtime:/etc/localtime:ro - /var/run/docker.sock:/var/run/docker.sock:ro - /your/path/traefik/data/traefik.yml:/traefik.yml:ro - /your/path/traefik/data/acme.json:/acme.json - /your/path/traefik/data/config.yml:/config.yml:ro labels: - traefik.enable=true - traefik.http.routers.traefik.rule=Host(`traefik-dashboard.local.domain.com`) - traefik.http.middlewares.traefik-auth.basicauth.users=${TRAEFIK_DASHBOARD_CREDENTIALS} - traefik.http.middlewares.traefik-https-redirect.redirectscheme.scheme=https - traefik.http.middlewares.sslheader.headers.customrequestheaders.X-Forwarded-Proto=https - traefik.http.routers.traefik.middlewares=traefik-https-redirect - traefik.http.routers.traefik-secure.entrypoints=https - traefik.http.routers.traefik-secure.rule=Host(`traefik-dashboard.local.domain.com`) - traefik.http.routers.traefik-secure.middlewares=traefik-auth - traefik.http.routers.traefik-secure.tls=true - traefik.http.routers.traefik-secure.tls.certresolver=cloudflare - traefik.http.routers.traefik-secure.tls.domains[0].main=local.domain.com - traefik.http.routers.traefik-secure.tls.domains[0].sans=*.local.domain.com - traefik.http.routers.traefik-secure.tls.domains[1].main=domain.com - traefik.http.routers.traefik-secure.tls.domains[1].sans=*.domain.com - traefik.http.routers.traefik-secure.service=api@internal - traefik.http.middlewares.external-https-redirect.redirectscheme.scheme=https - traefik.http.middlewares.external-https-redirect.redirectscheme.port=444 secrets: cf_api_token: file: /your/path/traefik/cf_api_token.txt networks: proxy: external: true 7. Deployment # docker-compose up -d Configuration # Entrypoints # This setup has distinct entrypoints for internal and external traffic. Internal Ports # http (80): Redirects to HTTPS https (443): Standard HTTPS for internal network access External Ports # external-http (81): HTTP for external access (typically redirected) external-https (444): HTTPS for external access (from internet) Firewall Setup # Your firewall should forward external port 443 to internal port 444. Benefits # Segregated traffic sources Different security rules for internal vs. external Selective exposure of services Certificate Management # Cloudflare Integration # DNS-01 challenge for domain validation Wildcard certificate support Automated renewal process Service Integration # Basic Service # To connect a service to Traefik, add these labels:\nservices: example-service: # ... labels: - traefik.enable=true - traefik.http.routers.myservice.rule=Host(`service.local.domain.com`) - traefik.http.routers.myservice.entrypoints=https - traefik.http.routers.myservice.tls=true - traefik.http.services.myservice.loadbalancer.server.port=8080 External Access # For a service that should be accessible externally:\nservices: external-service: # ... labels: # Internal access - traefik.enable=true - traefik.http.routers.myservice.rule=Host(`service.local.domain.com`) - traefik.http.routers.myservice.entrypoints=https - traefik.http.routers.myservice.tls=true # External access - traefik.http.routers.myservice-external.rule=Host(`service.domain.com`) - traefik.http.routers.myservice-external.entrypoints=external-https - traefik.http.routers.myservice-external.tls=true # Common configuration - traefik.http.services.myservice.loadbalancer.server.port=8080 Authentication Integration # Authentik SSO # Your configuration already includes the Authentik forward authentication middleware. To protect a service with Authentik authentication:\nservices: protected-app: # ... labels: - traefik.enable=true - traefik.http.routers.protected-app.rule=Host(`app.local.domain.com`) - traefik.http.routers.protected-app.middlewares=middlewares-authentik@file - traefik.http.routers.protected-app.entrypoints=https - traefik.http.routers.protected-app.tls=true "},{"id":1,"href":"/docs/authentik/","title":"Authentik Behind Traefik Reverse Proxy","section":"Docs","content":" Authentik Behind Traefik Reverse Proxy # Traefik Reverse Proxy Setup - Required foundation for this Authentik deployment\nOverview # This guide walks through setting up Authentik SSO behind a Traefik reverse proxy. Authentik is an open-source Identity Provider that provides secure authentication, authorization, and user management. This setup uses Docker Compose to deploy Authentik with PostgreSQL and Redis, all behind Traefik for secure access.\nArchitecture # The deployment consists of:\nTraefik: Reverse proxy handling TLS termination and routing PostgreSQL: Database backend for Authentik Redis: Cache and message broker Authentik Server: Main application component Authentik Worker: Background task processor Prerequisites # Docker and Docker Compose installed Traefik already configured as a reverse proxy External Docker network named \u0026ldquo;proxy\u0026rdquo; created NFS share mounted (or modify the volume paths as needed) .env file with required variables Installation # 1. Create the .env File # Create a .env file in the same directory as your docker-compose.yml:\n# Required variables PG_PASS=your_secure_password PG_USER=authentik PG_DB=authentik # Authentik-specific settings AUTHENTIK_SECRET_KEY=your_very_secure_random_key AUTHENTIK_ERROR_REPORTING__ENABLED=false AUTHENTIK_PORT_HTTP=9000 AUTHENTIK_PORT_HTTPS=9443 # Optional: Email settings AUTHENTIK_EMAIL__HOST=smtp.example.com AUTHENTIK_EMAIL__PORT=587 AUTHENTIK_EMAIL__USERNAME=mail_user AUTHENTIK_EMAIL__PASSWORD=mail_password AUTHENTIK_EMAIL__USE_TLS=true AUTHENTIK_EMAIL__FROM=authentik@example.com 2. Create Directory Structure # Ensure your NFS mount points exist:\nsudo mkdir -p /nfs/apps/authentik/{media,certs,custom-templates} 3. Deploy with Docker Compose # Save the following as docker-compose.yml:\nservices: postgresql: image: docker.io/library/postgres:12-alpine restart: unless-stopped healthcheck: test: - CMD-SHELL - pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER} start_period: 20s interval: 30s retries: 5 timeout: 5s volumes: - database:/var/lib/postgresql/data environment: POSTGRES_PASSWORD: ${PG_PASS:?database password required} POSTGRES_USER: ${PG_USER:-authentik} POSTGRES_DB: ${PG_DB:-authentik} env_file: - .env networks: proxy: null redis: image: docker.io/library/redis:alpine command: --save 60 1 --loglevel warning restart: unless-stopped healthcheck: test: - CMD-SHELL - redis-cli ping | grep PONG start_period: 20s interval: 30s retries: 5 timeout: 3s volumes: - redis:/data networks: proxy: null server: image: ${AUTHENTIK_IMAGE:-ghcr.io/goauthentik/server}:latest container_name: authentik_server restart: unless-stopped command: server environment: AUTHENTIK_REDIS__HOST: redis AUTHENTIK_POSTGRESQL__HOST: postgresql AUTHENTIK_POSTGRESQL__USER: ${PG_USER:-authentik} AUTHENTIK_POSTGRESQL__NAME: ${PG_DB:-authentik} AUTHENTIK_POSTGRESQL__PASSWORD: ${PG_PASS} volumes: - /nfs/apps/authentik/media:/media - /nfs/apps/authentik/custom-templates:/templates env_file: - .env depends_on: - postgresql - redis networks: proxy: null labels: - traefik.enable=true - traefik.http.routers.authentik.entrypoints=http - traefik.http.routers.authentik.rule=Host(`authentik.local.yourdomain.com`) - traefik.http.middlewares.authentik-https-redirect.redirectscheme.scheme=https - traefik.http.routers.authentik.middlewares=authentik-https-redirect - traefik.http.routers.authentik-secure.entrypoints=https - traefik.http.routers.authentik-secure.rule=Host(`authentik.local.yourdomain.com`) - traefik.http.routers.authentik-secure.tls=true - traefik.http.routers.authentik-secure.service=authentik - traefik.http.services.authentik.loadbalancer.server.scheme=https - traefik.http.services.authentik.loadbalancer.server.port=9443 - traefik.docker.network=proxy worker: image: ${AUTHENTIK_IMAGE:-ghcr.io/goauthentik/server}:latest restart: unless-stopped command: worker environment: AUTHENTIK_REDIS__HOST: redis AUTHENTIK_POSTGRESQL__HOST: postgresql AUTHENTIK_POSTGRESQL__USER: ${PG_USER:-authentik} AUTHENTIK_POSTGRESQL__NAME: ${PG_DB:-authentik} AUTHENTIK_POSTGRESQL__PASSWORD: ${PG_PASS} volumes: - /var/run/docker.sock:/var/run/docker.sock - /nfs/apps/authentik/media:/media - /nfs/apps/authentik/certs:/certs - /nfs/apps/authentik/custom-templates:/templates env_file: - .env depends_on: - postgresql - redis networks: proxy: null networks: proxy: external: true volumes: database: driver: local redis: driver: local 4. Start the Stack # docker-compose up -d Traefik Configuration Explained # The Traefik labels in the compose file configure:\nHTTP to HTTPS Redirection: All HTTP traffic is redirected to HTTPS Host Rule: Traffic to authentik.local.yourdomain.com is routed to Authentik TLS: HTTPS is enabled for secure connections Backend Service: Authentik server runs on port 9443 with HTTPS Initial Setup # Once deployed, access Authentik at https://authentik.local.yourdomain.com You\u0026rsquo;ll be prompted to create an admin user on first launch Follow the on-screen instructions to complete initial configuration Integrating with Other Services # Authentik can be configured as an identity provider for:\nWeb applications via OIDC/OAuth2 LDAP-compatible services SAML applications Proxied applications via forward authentication "}]